// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracker.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tracker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GPSDataPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPSDataPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPSDataPoint_Time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPSDataPoint_Time_reflection_ = NULL;
const ::google::protobuf::Descriptor* TravelDataPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TravelDataPoint_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tracker_2eproto() {
  protobuf_AddDesc_tracker_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tracker.proto");
  GOOGLE_CHECK(file != NULL);
  GPSDataPoint_descriptor_ = file->message_type(0);
  static const int GPSDataPoint_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSDataPoint, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSDataPoint, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSDataPoint, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSDataPoint, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSDataPoint, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSDataPoint, bearing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSDataPoint, satellites_),
  };
  GPSDataPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPSDataPoint_descriptor_,
      GPSDataPoint::default_instance_,
      GPSDataPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSDataPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSDataPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPSDataPoint));
  GPSDataPoint_Time_descriptor_ = GPSDataPoint_descriptor_->nested_type(0);
  static const int GPSDataPoint_Time_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSDataPoint_Time, seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSDataPoint_Time, microseconds_),
  };
  GPSDataPoint_Time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPSDataPoint_Time_descriptor_,
      GPSDataPoint_Time::default_instance_,
      GPSDataPoint_Time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSDataPoint_Time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSDataPoint_Time, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPSDataPoint_Time));
  TravelDataPoint_descriptor_ = file->message_type(1);
  static const int TravelDataPoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelDataPoint, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelDataPoint, ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelDataPoint, odometer_),
  };
  TravelDataPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TravelDataPoint_descriptor_,
      TravelDataPoint::default_instance_,
      TravelDataPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelDataPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelDataPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TravelDataPoint));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tracker_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPSDataPoint_descriptor_, &GPSDataPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPSDataPoint_Time_descriptor_, &GPSDataPoint_Time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TravelDataPoint_descriptor_, &TravelDataPoint::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tracker_2eproto() {
  delete GPSDataPoint::default_instance_;
  delete GPSDataPoint_reflection_;
  delete GPSDataPoint_Time::default_instance_;
  delete GPSDataPoint_Time_reflection_;
  delete TravelDataPoint::default_instance_;
  delete TravelDataPoint_reflection_;
}

void protobuf_AddDesc_tracker_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rtracker.proto\"\312\001\n\014GPSDataPoint\022 \n\004time"
    "\030\001 \002(\0132\022.GPSDataPoint.Time\022\020\n\010latitude\030\002"
    " \002(\001\022\021\n\tlongitude\030\003 \002(\001\022\020\n\010altitude\030\004 \002("
    "\001\022\r\n\005speed\030\005 \001(\001\022\017\n\007bearing\030\006 \001(\001\022\022\n\nsat"
    "ellites\030\007 \001(\005\032-\n\004Time\022\017\n\007seconds\030\001 \002(\003\022\024"
    "\n\014microseconds\030\002 \001(\005\"S\n\017TravelDataPoint\022"
    "\037\n\010location\030\001 \002(\0132\r.GPSDataPoint\022\r\n\005tick"
    "s\030\002 \002(\003\022\020\n\010odometer\030\003 \002(\003", 305);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tracker.proto", &protobuf_RegisterTypes);
  GPSDataPoint::default_instance_ = new GPSDataPoint();
  GPSDataPoint_Time::default_instance_ = new GPSDataPoint_Time();
  TravelDataPoint::default_instance_ = new TravelDataPoint();
  GPSDataPoint::default_instance_->InitAsDefaultInstance();
  GPSDataPoint_Time::default_instance_->InitAsDefaultInstance();
  TravelDataPoint::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tracker_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tracker_2eproto {
  StaticDescriptorInitializer_tracker_2eproto() {
    protobuf_AddDesc_tracker_2eproto();
  }
} static_descriptor_initializer_tracker_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GPSDataPoint_Time::kSecondsFieldNumber;
const int GPSDataPoint_Time::kMicrosecondsFieldNumber;
#endif  // !_MSC_VER

GPSDataPoint_Time::GPSDataPoint_Time()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GPSDataPoint.Time)
}

void GPSDataPoint_Time::InitAsDefaultInstance() {
}

GPSDataPoint_Time::GPSDataPoint_Time(const GPSDataPoint_Time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GPSDataPoint.Time)
}

void GPSDataPoint_Time::SharedCtor() {
  _cached_size_ = 0;
  seconds_ = GOOGLE_LONGLONG(0);
  microseconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPSDataPoint_Time::~GPSDataPoint_Time() {
  // @@protoc_insertion_point(destructor:GPSDataPoint.Time)
  SharedDtor();
}

void GPSDataPoint_Time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GPSDataPoint_Time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSDataPoint_Time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPSDataPoint_Time_descriptor_;
}

const GPSDataPoint_Time& GPSDataPoint_Time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();
  return *default_instance_;
}

GPSDataPoint_Time* GPSDataPoint_Time::default_instance_ = NULL;

GPSDataPoint_Time* GPSDataPoint_Time::New() const {
  return new GPSDataPoint_Time;
}

void GPSDataPoint_Time::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GPSDataPoint_Time*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(seconds_, microseconds_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPSDataPoint_Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GPSDataPoint.Time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 seconds = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_microseconds;
        break;
      }

      // optional int32 microseconds = 2;
      case 2: {
        if (tag == 16) {
         parse_microseconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &microseconds_)));
          set_has_microseconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GPSDataPoint.Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GPSDataPoint.Time)
  return false;
#undef DO_
}

void GPSDataPoint_Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GPSDataPoint.Time)
  // required int64 seconds = 1;
  if (has_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->seconds(), output);
  }

  // optional int32 microseconds = 2;
  if (has_microseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->microseconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GPSDataPoint.Time)
}

::google::protobuf::uint8* GPSDataPoint_Time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GPSDataPoint.Time)
  // required int64 seconds = 1;
  if (has_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->seconds(), target);
  }

  // optional int32 microseconds = 2;
  if (has_microseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->microseconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GPSDataPoint.Time)
  return target;
}

int GPSDataPoint_Time::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 seconds = 1;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->seconds());
    }

    // optional int32 microseconds = 2;
    if (has_microseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->microseconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSDataPoint_Time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPSDataPoint_Time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPSDataPoint_Time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPSDataPoint_Time::MergeFrom(const GPSDataPoint_Time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_microseconds()) {
      set_microseconds(from.microseconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPSDataPoint_Time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSDataPoint_Time::CopyFrom(const GPSDataPoint_Time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSDataPoint_Time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GPSDataPoint_Time::Swap(GPSDataPoint_Time* other) {
  if (other != this) {
    std::swap(seconds_, other->seconds_);
    std::swap(microseconds_, other->microseconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPSDataPoint_Time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPSDataPoint_Time_descriptor_;
  metadata.reflection = GPSDataPoint_Time_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GPSDataPoint::kTimeFieldNumber;
const int GPSDataPoint::kLatitudeFieldNumber;
const int GPSDataPoint::kLongitudeFieldNumber;
const int GPSDataPoint::kAltitudeFieldNumber;
const int GPSDataPoint::kSpeedFieldNumber;
const int GPSDataPoint::kBearingFieldNumber;
const int GPSDataPoint::kSatellitesFieldNumber;
#endif  // !_MSC_VER

GPSDataPoint::GPSDataPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GPSDataPoint)
}

void GPSDataPoint::InitAsDefaultInstance() {
  time_ = const_cast< ::GPSDataPoint_Time*>(&::GPSDataPoint_Time::default_instance());
}

GPSDataPoint::GPSDataPoint(const GPSDataPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GPSDataPoint)
}

void GPSDataPoint::SharedCtor() {
  _cached_size_ = 0;
  time_ = NULL;
  latitude_ = 0;
  longitude_ = 0;
  altitude_ = 0;
  speed_ = 0;
  bearing_ = 0;
  satellites_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPSDataPoint::~GPSDataPoint() {
  // @@protoc_insertion_point(destructor:GPSDataPoint)
  SharedDtor();
}

void GPSDataPoint::SharedDtor() {
  if (this != default_instance_) {
    delete time_;
  }
}

void GPSDataPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSDataPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPSDataPoint_descriptor_;
}

const GPSDataPoint& GPSDataPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();
  return *default_instance_;
}

GPSDataPoint* GPSDataPoint::default_instance_ = NULL;

GPSDataPoint* GPSDataPoint::New() const {
  return new GPSDataPoint;
}

void GPSDataPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GPSDataPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(latitude_, satellites_);
    if (has_time()) {
      if (time_ != NULL) time_->::GPSDataPoint_Time::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPSDataPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GPSDataPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GPSDataPoint.Time time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_latitude;
        break;
      }

      // required double latitude = 2;
      case 2: {
        if (tag == 17) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_longitude;
        break;
      }

      // required double longitude = 3;
      case 3: {
        if (tag == 25) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_altitude;
        break;
      }

      // required double altitude = 4;
      case 4: {
        if (tag == 33) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_speed;
        break;
      }

      // optional double speed = 5;
      case 5: {
        if (tag == 41) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_bearing;
        break;
      }

      // optional double bearing = 6;
      case 6: {
        if (tag == 49) {
         parse_bearing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bearing_)));
          set_has_bearing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_satellites;
        break;
      }

      // optional int32 satellites = 7;
      case 7: {
        if (tag == 56) {
         parse_satellites:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &satellites_)));
          set_has_satellites();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GPSDataPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GPSDataPoint)
  return false;
#undef DO_
}

void GPSDataPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GPSDataPoint)
  // required .GPSDataPoint.Time time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->time(), output);
  }

  // required double latitude = 2;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // required double longitude = 3;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }

  // required double altitude = 4;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->altitude(), output);
  }

  // optional double speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed(), output);
  }

  // optional double bearing = 6;
  if (has_bearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->bearing(), output);
  }

  // optional int32 satellites = 7;
  if (has_satellites()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->satellites(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GPSDataPoint)
}

::google::protobuf::uint8* GPSDataPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GPSDataPoint)
  // required .GPSDataPoint.Time time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->time(), target);
  }

  // required double latitude = 2;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // required double longitude = 3;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude(), target);
  }

  // required double altitude = 4;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->altitude(), target);
  }

  // optional double speed = 5;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->speed(), target);
  }

  // optional double bearing = 6;
  if (has_bearing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->bearing(), target);
  }

  // optional int32 satellites = 7;
  if (has_satellites()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->satellites(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GPSDataPoint)
  return target;
}

int GPSDataPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GPSDataPoint.Time time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

    // required double latitude = 2;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required double longitude = 3;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // required double altitude = 4;
    if (has_altitude()) {
      total_size += 1 + 8;
    }

    // optional double speed = 5;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional double bearing = 6;
    if (has_bearing()) {
      total_size += 1 + 8;
    }

    // optional int32 satellites = 7;
    if (has_satellites()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->satellites());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSDataPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPSDataPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPSDataPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPSDataPoint::MergeFrom(const GPSDataPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      mutable_time()->::GPSDataPoint_Time::MergeFrom(from.time());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_bearing()) {
      set_bearing(from.bearing());
    }
    if (from.has_satellites()) {
      set_satellites(from.satellites());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPSDataPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSDataPoint::CopyFrom(const GPSDataPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSDataPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_time()) {
    if (!this->time().IsInitialized()) return false;
  }
  return true;
}

void GPSDataPoint::Swap(GPSDataPoint* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(altitude_, other->altitude_);
    std::swap(speed_, other->speed_);
    std::swap(bearing_, other->bearing_);
    std::swap(satellites_, other->satellites_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPSDataPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPSDataPoint_descriptor_;
  metadata.reflection = GPSDataPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TravelDataPoint::kLocationFieldNumber;
const int TravelDataPoint::kTicksFieldNumber;
const int TravelDataPoint::kOdometerFieldNumber;
#endif  // !_MSC_VER

TravelDataPoint::TravelDataPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TravelDataPoint)
}

void TravelDataPoint::InitAsDefaultInstance() {
  location_ = const_cast< ::GPSDataPoint*>(&::GPSDataPoint::default_instance());
}

TravelDataPoint::TravelDataPoint(const TravelDataPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TravelDataPoint)
}

void TravelDataPoint::SharedCtor() {
  _cached_size_ = 0;
  location_ = NULL;
  ticks_ = GOOGLE_LONGLONG(0);
  odometer_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TravelDataPoint::~TravelDataPoint() {
  // @@protoc_insertion_point(destructor:TravelDataPoint)
  SharedDtor();
}

void TravelDataPoint::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

void TravelDataPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TravelDataPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TravelDataPoint_descriptor_;
}

const TravelDataPoint& TravelDataPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_2eproto();
  return *default_instance_;
}

TravelDataPoint* TravelDataPoint::default_instance_ = NULL;

TravelDataPoint* TravelDataPoint::New() const {
  return new TravelDataPoint;
}

void TravelDataPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TravelDataPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(ticks_, odometer_);
    if (has_location()) {
      if (location_ != NULL) location_->::GPSDataPoint::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TravelDataPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TravelDataPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GPSDataPoint location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ticks;
        break;
      }

      // required int64 ticks = 2;
      case 2: {
        if (tag == 16) {
         parse_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ticks_)));
          set_has_ticks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_odometer;
        break;
      }

      // required int64 odometer = 3;
      case 3: {
        if (tag == 24) {
         parse_odometer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &odometer_)));
          set_has_odometer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TravelDataPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TravelDataPoint)
  return false;
#undef DO_
}

void TravelDataPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TravelDataPoint)
  // required .GPSDataPoint location = 1;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->location(), output);
  }

  // required int64 ticks = 2;
  if (has_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ticks(), output);
  }

  // required int64 odometer = 3;
  if (has_odometer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->odometer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TravelDataPoint)
}

::google::protobuf::uint8* TravelDataPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TravelDataPoint)
  // required .GPSDataPoint location = 1;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location(), target);
  }

  // required int64 ticks = 2;
  if (has_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ticks(), target);
  }

  // required int64 odometer = 3;
  if (has_odometer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->odometer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TravelDataPoint)
  return target;
}

int TravelDataPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GPSDataPoint location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

    // required int64 ticks = 2;
    if (has_ticks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ticks());
    }

    // required int64 odometer = 3;
    if (has_odometer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->odometer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TravelDataPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TravelDataPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TravelDataPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TravelDataPoint::MergeFrom(const TravelDataPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      mutable_location()->::GPSDataPoint::MergeFrom(from.location());
    }
    if (from.has_ticks()) {
      set_ticks(from.ticks());
    }
    if (from.has_odometer()) {
      set_odometer(from.odometer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TravelDataPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TravelDataPoint::CopyFrom(const TravelDataPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TravelDataPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  return true;
}

void TravelDataPoint::Swap(TravelDataPoint* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(ticks_, other->ticks_);
    std::swap(odometer_, other->odometer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TravelDataPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TravelDataPoint_descriptor_;
  metadata.reflection = TravelDataPoint_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
