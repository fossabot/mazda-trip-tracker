// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracker.proto

#ifndef PROTOBUF_tracker_2eproto__INCLUDED
#define PROTOBUF_tracker_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tracker_2eproto();
void protobuf_AssignDesc_tracker_2eproto();
void protobuf_ShutdownFile_tracker_2eproto();

class GPSDataPoint;
class GPSDataPoint_Time;
class TravelDataPoint;

// ===================================================================

class GPSDataPoint_Time : public ::google::protobuf::Message {
 public:
  GPSDataPoint_Time();
  virtual ~GPSDataPoint_Time();

  GPSDataPoint_Time(const GPSDataPoint_Time& from);

  inline GPSDataPoint_Time& operator=(const GPSDataPoint_Time& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GPSDataPoint_Time& default_instance();

  void Swap(GPSDataPoint_Time* other);

  // implements Message ----------------------------------------------

  GPSDataPoint_Time* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GPSDataPoint_Time& from);
  void MergeFrom(const GPSDataPoint_Time& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 seconds = 1;
  inline bool has_seconds() const;
  inline void clear_seconds();
  static const int kSecondsFieldNumber = 1;
  inline ::google::protobuf::int64 seconds() const;
  inline void set_seconds(::google::protobuf::int64 value);

  // optional int32 microseconds = 2;
  inline bool has_microseconds() const;
  inline void clear_microseconds();
  static const int kMicrosecondsFieldNumber = 2;
  inline ::google::protobuf::int32 microseconds() const;
  inline void set_microseconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GPSDataPoint.Time)
 private:
  inline void set_has_seconds();
  inline void clear_has_seconds();
  inline void set_has_microseconds();
  inline void clear_has_microseconds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 seconds_;
  ::google::protobuf::int32 microseconds_;
  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();

  void InitAsDefaultInstance();
  static GPSDataPoint_Time* default_instance_;
};
// -------------------------------------------------------------------

class GPSDataPoint : public ::google::protobuf::Message {
 public:
  GPSDataPoint();
  virtual ~GPSDataPoint();

  GPSDataPoint(const GPSDataPoint& from);

  inline GPSDataPoint& operator=(const GPSDataPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GPSDataPoint& default_instance();

  void Swap(GPSDataPoint* other);

  // implements Message ----------------------------------------------

  GPSDataPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GPSDataPoint& from);
  void MergeFrom(const GPSDataPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GPSDataPoint_Time Time;

  // accessors -------------------------------------------------------

  // required .GPSDataPoint.Time time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline const ::GPSDataPoint_Time& time() const;
  inline ::GPSDataPoint_Time* mutable_time();
  inline ::GPSDataPoint_Time* release_time();
  inline void set_allocated_time(::GPSDataPoint_Time* time);

  // required double latitude = 2;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required double longitude = 3;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 3;
  inline double longitude() const;
  inline void set_longitude(double value);

  // required double altitude = 4;
  inline bool has_altitude() const;
  inline void clear_altitude();
  static const int kAltitudeFieldNumber = 4;
  inline double altitude() const;
  inline void set_altitude(double value);

  // optional double speed = 5;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 5;
  inline double speed() const;
  inline void set_speed(double value);

  // optional double bearing = 6;
  inline bool has_bearing() const;
  inline void clear_bearing();
  static const int kBearingFieldNumber = 6;
  inline double bearing() const;
  inline void set_bearing(double value);

  // optional int32 satellites = 7;
  inline bool has_satellites() const;
  inline void clear_satellites();
  static const int kSatellitesFieldNumber = 7;
  inline ::google::protobuf::int32 satellites() const;
  inline void set_satellites(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GPSDataPoint)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_altitude();
  inline void clear_has_altitude();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_bearing();
  inline void clear_has_bearing();
  inline void set_has_satellites();
  inline void clear_has_satellites();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::GPSDataPoint_Time* time_;
  double latitude_;
  double longitude_;
  double altitude_;
  double speed_;
  double bearing_;
  ::google::protobuf::int32 satellites_;
  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();

  void InitAsDefaultInstance();
  static GPSDataPoint* default_instance_;
};
// -------------------------------------------------------------------

class TravelDataPoint : public ::google::protobuf::Message {
 public:
  TravelDataPoint();
  virtual ~TravelDataPoint();

  TravelDataPoint(const TravelDataPoint& from);

  inline TravelDataPoint& operator=(const TravelDataPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TravelDataPoint& default_instance();

  void Swap(TravelDataPoint* other);

  // implements Message ----------------------------------------------

  TravelDataPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TravelDataPoint& from);
  void MergeFrom(const TravelDataPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .GPSDataPoint location = 1;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 1;
  inline const ::GPSDataPoint& location() const;
  inline ::GPSDataPoint* mutable_location();
  inline ::GPSDataPoint* release_location();
  inline void set_allocated_location(::GPSDataPoint* location);

  // required int64 ticks = 2;
  inline bool has_ticks() const;
  inline void clear_ticks();
  static const int kTicksFieldNumber = 2;
  inline ::google::protobuf::int64 ticks() const;
  inline void set_ticks(::google::protobuf::int64 value);

  // required int64 odometer = 3;
  inline bool has_odometer() const;
  inline void clear_odometer();
  static const int kOdometerFieldNumber = 3;
  inline ::google::protobuf::int64 odometer() const;
  inline void set_odometer(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:TravelDataPoint)
 private:
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_ticks();
  inline void clear_has_ticks();
  inline void set_has_odometer();
  inline void clear_has_odometer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::GPSDataPoint* location_;
  ::google::protobuf::int64 ticks_;
  ::google::protobuf::int64 odometer_;
  friend void  protobuf_AddDesc_tracker_2eproto();
  friend void protobuf_AssignDesc_tracker_2eproto();
  friend void protobuf_ShutdownFile_tracker_2eproto();

  void InitAsDefaultInstance();
  static TravelDataPoint* default_instance_;
};
// ===================================================================


// ===================================================================

// GPSDataPoint_Time

// required int64 seconds = 1;
inline bool GPSDataPoint_Time::has_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GPSDataPoint_Time::set_has_seconds() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GPSDataPoint_Time::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GPSDataPoint_Time::clear_seconds() {
  seconds_ = GOOGLE_LONGLONG(0);
  clear_has_seconds();
}
inline ::google::protobuf::int64 GPSDataPoint_Time::seconds() const {
  // @@protoc_insertion_point(field_get:GPSDataPoint.Time.seconds)
  return seconds_;
}
inline void GPSDataPoint_Time::set_seconds(::google::protobuf::int64 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:GPSDataPoint.Time.seconds)
}

// optional int32 microseconds = 2;
inline bool GPSDataPoint_Time::has_microseconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GPSDataPoint_Time::set_has_microseconds() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GPSDataPoint_Time::clear_has_microseconds() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GPSDataPoint_Time::clear_microseconds() {
  microseconds_ = 0;
  clear_has_microseconds();
}
inline ::google::protobuf::int32 GPSDataPoint_Time::microseconds() const {
  // @@protoc_insertion_point(field_get:GPSDataPoint.Time.microseconds)
  return microseconds_;
}
inline void GPSDataPoint_Time::set_microseconds(::google::protobuf::int32 value) {
  set_has_microseconds();
  microseconds_ = value;
  // @@protoc_insertion_point(field_set:GPSDataPoint.Time.microseconds)
}

// -------------------------------------------------------------------

// GPSDataPoint

// required .GPSDataPoint.Time time = 1;
inline bool GPSDataPoint::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GPSDataPoint::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GPSDataPoint::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GPSDataPoint::clear_time() {
  if (time_ != NULL) time_->::GPSDataPoint_Time::Clear();
  clear_has_time();
}
inline const ::GPSDataPoint_Time& GPSDataPoint::time() const {
  // @@protoc_insertion_point(field_get:GPSDataPoint.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::GPSDataPoint_Time* GPSDataPoint::mutable_time() {
  set_has_time();
  if (time_ == NULL) time_ = new ::GPSDataPoint_Time;
  // @@protoc_insertion_point(field_mutable:GPSDataPoint.time)
  return time_;
}
inline ::GPSDataPoint_Time* GPSDataPoint::release_time() {
  clear_has_time();
  ::GPSDataPoint_Time* temp = time_;
  time_ = NULL;
  return temp;
}
inline void GPSDataPoint::set_allocated_time(::GPSDataPoint_Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:GPSDataPoint.time)
}

// required double latitude = 2;
inline bool GPSDataPoint::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GPSDataPoint::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GPSDataPoint::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GPSDataPoint::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double GPSDataPoint::latitude() const {
  // @@protoc_insertion_point(field_get:GPSDataPoint.latitude)
  return latitude_;
}
inline void GPSDataPoint::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:GPSDataPoint.latitude)
}

// required double longitude = 3;
inline bool GPSDataPoint::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GPSDataPoint::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GPSDataPoint::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GPSDataPoint::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double GPSDataPoint::longitude() const {
  // @@protoc_insertion_point(field_get:GPSDataPoint.longitude)
  return longitude_;
}
inline void GPSDataPoint::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:GPSDataPoint.longitude)
}

// required double altitude = 4;
inline bool GPSDataPoint::has_altitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GPSDataPoint::set_has_altitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GPSDataPoint::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GPSDataPoint::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double GPSDataPoint::altitude() const {
  // @@protoc_insertion_point(field_get:GPSDataPoint.altitude)
  return altitude_;
}
inline void GPSDataPoint::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:GPSDataPoint.altitude)
}

// optional double speed = 5;
inline bool GPSDataPoint::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GPSDataPoint::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GPSDataPoint::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GPSDataPoint::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double GPSDataPoint::speed() const {
  // @@protoc_insertion_point(field_get:GPSDataPoint.speed)
  return speed_;
}
inline void GPSDataPoint::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:GPSDataPoint.speed)
}

// optional double bearing = 6;
inline bool GPSDataPoint::has_bearing() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GPSDataPoint::set_has_bearing() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GPSDataPoint::clear_has_bearing() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GPSDataPoint::clear_bearing() {
  bearing_ = 0;
  clear_has_bearing();
}
inline double GPSDataPoint::bearing() const {
  // @@protoc_insertion_point(field_get:GPSDataPoint.bearing)
  return bearing_;
}
inline void GPSDataPoint::set_bearing(double value) {
  set_has_bearing();
  bearing_ = value;
  // @@protoc_insertion_point(field_set:GPSDataPoint.bearing)
}

// optional int32 satellites = 7;
inline bool GPSDataPoint::has_satellites() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GPSDataPoint::set_has_satellites() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GPSDataPoint::clear_has_satellites() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GPSDataPoint::clear_satellites() {
  satellites_ = 0;
  clear_has_satellites();
}
inline ::google::protobuf::int32 GPSDataPoint::satellites() const {
  // @@protoc_insertion_point(field_get:GPSDataPoint.satellites)
  return satellites_;
}
inline void GPSDataPoint::set_satellites(::google::protobuf::int32 value) {
  set_has_satellites();
  satellites_ = value;
  // @@protoc_insertion_point(field_set:GPSDataPoint.satellites)
}

// -------------------------------------------------------------------

// TravelDataPoint

// required .GPSDataPoint location = 1;
inline bool TravelDataPoint::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TravelDataPoint::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TravelDataPoint::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TravelDataPoint::clear_location() {
  if (location_ != NULL) location_->::GPSDataPoint::Clear();
  clear_has_location();
}
inline const ::GPSDataPoint& TravelDataPoint::location() const {
  // @@protoc_insertion_point(field_get:TravelDataPoint.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::GPSDataPoint* TravelDataPoint::mutable_location() {
  set_has_location();
  if (location_ == NULL) location_ = new ::GPSDataPoint;
  // @@protoc_insertion_point(field_mutable:TravelDataPoint.location)
  return location_;
}
inline ::GPSDataPoint* TravelDataPoint::release_location() {
  clear_has_location();
  ::GPSDataPoint* temp = location_;
  location_ = NULL;
  return temp;
}
inline void TravelDataPoint::set_allocated_location(::GPSDataPoint* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:TravelDataPoint.location)
}

// required int64 ticks = 2;
inline bool TravelDataPoint::has_ticks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TravelDataPoint::set_has_ticks() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TravelDataPoint::clear_has_ticks() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TravelDataPoint::clear_ticks() {
  ticks_ = GOOGLE_LONGLONG(0);
  clear_has_ticks();
}
inline ::google::protobuf::int64 TravelDataPoint::ticks() const {
  // @@protoc_insertion_point(field_get:TravelDataPoint.ticks)
  return ticks_;
}
inline void TravelDataPoint::set_ticks(::google::protobuf::int64 value) {
  set_has_ticks();
  ticks_ = value;
  // @@protoc_insertion_point(field_set:TravelDataPoint.ticks)
}

// required int64 odometer = 3;
inline bool TravelDataPoint::has_odometer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TravelDataPoint::set_has_odometer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TravelDataPoint::clear_has_odometer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TravelDataPoint::clear_odometer() {
  odometer_ = GOOGLE_LONGLONG(0);
  clear_has_odometer();
}
inline ::google::protobuf::int64 TravelDataPoint::odometer() const {
  // @@protoc_insertion_point(field_get:TravelDataPoint.odometer)
  return odometer_;
}
inline void TravelDataPoint::set_odometer(::google::protobuf::int64 value) {
  set_has_odometer();
  odometer_ = value;
  // @@protoc_insertion_point(field_set:TravelDataPoint.odometer)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tracker_2eproto__INCLUDED
